/* CMSIS-DAP Interface Firmware
 * Copyright (c) 2009-2013 ARM Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef FLASH_BLOB_H
#define FLASH_BLOB_H

#include "stdint.h"

#ifdef __cplusplus
  extern "C" {
#endif

typedef struct {
    uint32_t breakpoint;
    uint32_t static_base;
    uint32_t stack_pointer;
} program_syscall_t;

typedef struct {
    const uint32_t  init;
    const uint32_t  uninit;
    const uint32_t  erase_chip;
    const uint32_t  erase_sector;
    const uint32_t  program_page;
    const program_syscall_t sys_call_s;
    const uint32_t  program_buffer;
    const uint32_t  algo_start;
    const uint32_t  algo_size;
    const uint32_t *algo_blob;
    const uint32_t  program_buffer_size;
} program_target_t;

static const uint32_t KW01Z_FLM[] = {
    0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
    0x492cb510, 0x60082000, 0x4448482b, 0xf8a8f000, 0xd0002800, 0xbd102001, 0x47702000, 0xb5104826, 
    0x44484926, 0xf888f000, 0xd1050004, 0x21004822, 0xf0004448, 0x4604f94f, 0xf835f000, 0xbd104620, 
    0x4d1db570, 0x444d4606, 0x4b1c4601, 0x68ea4628, 0xf838f000, 0xd1060004, 0x46312300, 0x68ea4628, 
    0xf900f000, 0xf0004604, 0x4620f81e, 0xb5febd70, 0x460b460d, 0x46014607, 0x4616480f, 0xf0004448, 
    0x0004f8c1, 0x9001d10b, 0x21019002, 0x9100480a, 0x462a4633, 0x44484639, 0xf92af000, 0xf0004604, 
    0x4620f802, 0x4806bdfe, 0x220168c1, 0x43110292, 0x477060c1, 0x40048100, 0x00000004, 0x6b65666b, 
    0xf0003000, 0x4607b5f8, 0x460d4614, 0xf0004618, 0x2800f881, 0x2304d12a, 0x46294622, 0xf0004638, 
    0x0006f861, 0x192cd122, 0x1e6468f9, 0x91004620, 0xf969f000, 0xd0162900, 0x1c409c00, 0x1e644344, 
    0x480be011, 0x68004478, 0x490a6005, 0x71c82009, 0xf920f000, 0x69b84606, 0xd0002800, 0x2e004780, 
    0x68f8d103, 0x42a51945, 0x4630d9eb, 0x0000bdf8, 0x00000454, 0x40020000, 0x4604b510, 0xf0004608, 
    0x2800f849, 0x2c00d106, 0x4904d005, 0x71c82044, 0xf900f000, 0x2004bd10, 0x0000bd10, 0x40020000, 
    0xd0142800, 0x68c94924, 0x01094a24, 0x00490f09, 0x5a51447a, 0xd00c030a, 0xc0062100, 0x60022202, 
    0x02526081, 0x604260c1, 0x46086101, 0x20044770, 0x20644770, 0x28004770, 0x6181d002, 0x47702000, 
    0x47702004, 0x2800b510, 0x1e5bd006, 0xd1014219, 0xd003421a, 0xbd102065, 0xbd102004, 0x428b6803, 
    0x6840d804, 0x18181889, 0xd2014288, 0xbd102066, 0xbd102000, 0x4288490a, 0x206bd001, 0x20004770, 
    0x28004770, 0x290fd003, 0x2a04d801, 0x2004d001, 0x20004770, 0x00004770, 0x40048040, 0x000003c6, 
    0x6b65666b, 0xb081b5ff, 0x0015461e, 0xd007460f, 0x46322304, 0xf7ff9801, 0x0004ffc5, 0xe018d101, 
    0xb0052004, 0x480dbdf0, 0x68014478, 0xcd02600f, 0x60416800, 0x2006490a, 0xf00071c8, 0x4604f88b, 
    0x69809801, 0xd0002800, 0x2c004780, 0x1f36d103, 0x2e001d3f, 0x4620d1e7, 0x0000e7e3, 0x00000330, 
    0x40020000, 0xb081b5ff, 0x460e4614, 0x23044605, 0xff98f7ff, 0xd1272800, 0x686868a9, 0xf8a3f000, 
    0x42719000, 0x40014240, 0x42b5424d, 0x9800d101, 0x2c00182d, 0x1bafd017, 0xd90042a7, 0x480b4627, 
    0x447808b9, 0x60066800, 0x22014809, 0x0a0a71c2, 0x728172c2, 0x72419904, 0xf84cf000, 0xd1032800, 
    0x19f61be4, 0x2000e7e3, 0xbdf0b005, 0x000002b6, 0x40020000, 0x2800b510, 0x4804d006, 0x71c22240, 
    0xf0007181, 0xbd10f837, 0xbd102004, 0x40020000, 0x9f08b5f8, 0x4616001c, 0xd005460d, 0xf7ff2304, 
    0x2800ff51, 0xe01dd101, 0xbdf82004, 0x4478480f, 0x600d6801, 0x2202490e, 0x9a0671ca, 0x680072ca, 
    0x60816821, 0xf816f000, 0xd0082800, 0x29009907, 0x600dd000, 0xd0e82f00, 0x60392100, 0x1d24bdf8, 
    0x1f361d2d, 0xd1e12e00, 0x0000bdf8, 0x0000024a, 0x40020000, 0x2170480a, 0x21807001, 0x78017001, 
    0xd0fc09c9, 0x06817800, 0x2067d501, 0x06c14770, 0x2068d501, 0x07c04770, 0x2069d0fc, 0x00004770, 
    0x40020000, 0x2800b500, 0x2a00d009, 0x000bd007, 0xf8c6f000, 0x0b0b0708, 0x13110f0d, 0x20041715, 
    0x68c0bd00, 0x20006010, 0x6840bd00, 0x6880e7fa, 0x6800e7f8, 0x2000e7f6, 0x6900e7f4, 0x6940e7f2, 
    0x206ae7f0, 0x2200bd00, 0x428b0903, 0x0a03d32c, 0xd311428b, 0x469c2300, 0x4603e04e, 0xd43c430b, 
    0x08432200, 0xd331428b, 0x428b0903, 0x0a03d31c, 0xd301428b, 0xe03f4694, 0x428b09c3, 0x01cbd301, 
    0x41521ac0, 0x428b0983, 0x018bd301, 0x41521ac0, 0x428b0943, 0x014bd301, 0x41521ac0, 0x428b0903, 
    0x010bd301, 0x41521ac0, 0x428b08c3, 0x00cbd301, 0x41521ac0, 0x428b0883, 0x008bd301, 0x41521ac0, 
    0x428b0843, 0x004bd301, 0x41521ac0, 0xd2001a41, 0x41524601, 0x47704610, 0x0fcae05d, 0x4249d000, 
    0xd3001003, 0x40534240, 0x469c2200, 0x428b0903, 0x0a03d32d, 0xd312428b, 0x018922fc, 0x0a03ba12, 
    0xd30c428b, 0x11920189, 0xd308428b, 0x11920189, 0xd304428b, 0xd03a0189, 0xe0001192, 0x09c30989, 
    0xd301428b, 0x1ac001cb, 0x09834152, 0xd301428b, 0x1ac0018b, 0x09434152, 0xd301428b, 0x1ac0014b, 
    0x09034152, 0xd301428b, 0x1ac0010b, 0x08c34152, 0xd301428b, 0x1ac000cb, 0x08834152, 0xd301428b, 
    0x1ac0008b, 0xd2d94152, 0x428b0843, 0x004bd301, 0x41521ac0, 0xd2001a41, 0x46634601, 0x105b4152, 
    0xd3014610, 0x2b004240, 0x4249d500, 0x46634770, 0xd300105b, 0xb5014240, 0x46c02000, 0xbd0246c0, 
    0x4674b430, 0x78251e64, 0x42ab1c64, 0x461dd200, 0x005b5d63, 0xbc3018e3, 0x00024718, 0x00000004, 
    0x00000008, 0x00000010, 0x00000020, 0x00000040, 0x00000000, 0x00000000, 0x00000020, 0x40020004, 
    0x00000000, 
};

static const program_target_t flash = {
    .init = 0x20000021, // Init
    .uninit = 0x20000039, // UnInit
    .erase_chip = 0x2000003D, // EraseChip
    .erase_sector = 0x20000061, // EraseSector
    .program_page = 0x2000008F, // ProgramPage

    // breakpoint = RAM start + 1
    // RSB : base address is address of Execution Region PrgData in map file
    //       to access global/static data
    // RSP : Initial stack pointer
    {
        .breakpoint = 0x20000001, // breakpoint instruction address
        .static_base = 0x20000000 + 0x20 + 560,  // static base register value (image start + header + static base offset)
        .stack_pointer = 0x20000800  // initial stack pointer
    },

    .program_buffer = 0x20000a00, // program_buffer, any valid RAM location with +512 bytes of headroom
    .algo_start = 0x20000000, // algo_start, start of RAM
    .algo_size = sizeof(KW01Z_FLM), // algo_size, size of array above
    .algo_blob = KW01Z_FLM,  // image, flash algo instruction array
    .program_buffer_size = 512 // should be USBD_MSC_BlockSize
};

#ifdef __cplusplus
  }
#endif

#endif
